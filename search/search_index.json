{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Welcome to my PyCon Thailand Workshop","text":"<p>By Michelle Sandford From Microsoft Asia </p> <p></p> <p>Explore the journey through Imposter Syndrome and out the other side! Discover your strengths as a Pythonista. Navigate each chapter to learn, reflect, and grow!</p>"},{"location":"#chapters","title":"\ud83d\udcda Chapters","text":"<ul> <li>Imposter Syndrome - That voice inside your head that holds you back from opportunity is not your friend!</li> <li>The Expert - You don't need to know everything</li> <li>The Perfectionist - Progress over perfection</li> <li>The Superperson - Balance is key</li> <li>The Natural Genius - Learning takes time</li> <li>The Soloist - Collaboration is strength</li> <li>Key Takeaways - What we've learned</li> <li>Resources - Continue your journey</li> <li>Contact Page - Stay connected</li> </ul>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<p>Select a chapter from the navigation to begin your workshop journey.</p>"},{"location":"contact/","title":"\ud83d\udcec Contact Page","text":""},{"location":"contact/#get-in-touch","title":"\ud83d\udcac Get in Touch","text":"<p>We'd love to hear from you! For questions, feedback, or collaboration opportunities, reach out:</p>"},{"location":"contact/#social-media","title":"\ud83c\udf10 Social Media","text":"<ul> <li>LinkTree: Codess_aus</li> <li>BlueSky: codess-aus.bsky.social</li> <li>LinkedIn: Michelle Sandford</li> <li>GitHub: Codess-AUS</li> <li>YouTube: Michelle Sandford</li> <li>TikTok: Codess_Aus</li> </ul>"},{"location":"contact/#join-the-community","title":"\ud83e\udd1d Join the Community","text":"<p>Connect with fellow Pythonistas: - Attend PyCon Thailand - Join local Python meetups - Participate in online discussions - Share your story and help others</p>"},{"location":"contact/#thank-you","title":"\ud83d\ude4f Thank You!","text":"<p>Thank you for joining the Overcome Your Imposter Syndrome with GitHub Copilot workshop at PyCon Thailand!</p> <p>Remember: You are capable, you are learning, and you belong in this community.</p> <p>Keep coding! \ud83d\udc0d\ud83d\udc9c</p>"},{"location":"imposter-syndrome/","title":"\ud83d\ude28 Imposter Syndrome","text":"<p>Imposter Syndrome is the feeling that you don't belong or aren't good enough, even when you are! Many Pythonistas experience this at some point in their journey.  </p>"},{"location":"imposter-syndrome/#what-is-imposter-syndrome","title":"\ud83d\udca1 What is Imposter Syndrome?","text":"<p>Imposter Syndrome is is a psychological phenomenon where people doubt their skills, talents, or accomplishments and have a persistent fear of being exposed as frauds.  </p> <p>There are five types of imposter syndrome, according to researcher Dr.\u00a0Valerie Young:  </p> <ul> <li>The Perfectionist: This type involves believing that you could have done better, unless you were absolutely perfect.  </li> <li>The Expert: This type involves feeling like a fraud because you don\u2019t know everything there is to know about a subject or topic.  </li> <li>The Natural Genius: This type involves feeling like a fraud because you don\u2019t believe that you are naturally intelligent or competent.  </li> <li>The Soloist: This type involves feeling like a fraud if you had to ask for help to reach a certain level or status.  </li> <li>The Superperson: This type involves feeling like a fraud because you are trying to excel in multiple roles, such as work, family, and personal life.</li> </ul> <p>It can affect anyone and they may experience anxiety, depression, low self-confidence, and frustration.  </p> <p>Often people attribute their success to luck, timing, or deceiving others, rather than their own abilities.  </p> <p>Now as I get older, I worry less about what other people think. But I still remember how hard it was earlier in my career to ask for help and how much it would have helped me if I had someone I could turn to without judgement. [and by earlier in my career, I mean yesterday\u2026]</p> <p></p>"},{"location":"imposter-syndrome/#how-to-overcome","title":"\ud83d\udee0\ufe0f How to Overcome","text":"<ul> <li>Recognize your achievements - Keep a success journal</li> <li>Talk to peers and mentors - Share your feelings openly</li> <li>Celebrate small wins - Keep a Happiness Jar. Each time something good happens put a keepsake in the jar, or write a note on a brightly coloured postit. I save stickers, tickets, ribbons, buttons, pins, badges - all sorts of little memories.</li> <li>Remember: You are not alone! - This affects up to 70% of people</li> </ul>"},{"location":"imposter-syndrome/#next-the-expert","title":"\u27a1\ufe0f Next: The Expert","text":""},{"location":"key-takeaways/","title":"\ud83d\udcdd Key Takeaways","text":""},{"location":"key-takeaways/#storytime","title":"Storytime","text":"<p>One day I was struggling with my demo's (this was pre-Copilot) and I couldn't figure out what was wrong. I had rebuilt my demo 8 times or more (they say repeating the same steps and expecting a different outcome is the definition of insanity...)and it still wouldn't work. </p> <p>I asked my grad hire - Jiaranai - to take a look at my code. She said \"How come you ask me, Michelle, you should ask Graeme, he's the Senior Developer. He will surely know the answer.\"  </p> <p>I replied \"I asked Graeme yesterday. He did the same things I had done, checked the same things, undertook the same troubleshooting... and he couldn't figure it out.\"  </p> <p>Jia looked at my code for 30 mins and then she said \"There is a capital letter in the file path and not in the code.\"  </p> <p>I learnt 3 things that day:</p> <ul> <li>Experience and expertise do not always solve the problem. Diversity of thought comes from seeing things that others do not see, and if you are younger, less experienced, closer to your education \u2013 you might well pick out the flaws a more senior dev cannot see.</li> <li>It wasn\u2019t because I was a bad coder that I couldn\u2019t fix my code.</li> <li>It is never a mistake to look for help from different sources. </li> </ul>"},{"location":"key-takeaways/#what-weve-learned","title":"\ud83c\udfaf What We've Learned","text":"<ul> <li>Everyone experiences doubts\u2014it's normal! Up to 70% of people experience imposter syndrome at some point</li> <li>Growth comes from learning and sharing - Teaching others reinforces your own knowledge</li> <li>Progress is more important than perfection - Done is better than perfect</li> <li>Community support makes a difference - You're never alone in this journey</li> <li>Balance is essential - Take care of yourself while pursuing your goals</li> <li>Learning takes time - Be patient with yourself</li> <li>Seek to Recognize and challenge your negative thoughts - That voice inside your head is not your friend.   </li> <li>Get feedback and support from others - They might see things you do not.</li> <li>Celebrate your achievements and acknowledge your strengths - Get a Happiness Jar  </li> <li>Develop a growth mindset and embrace learning opportunities. - But learn when to say No, as well as when to say Yes.  </li> <li>Seek professional help if you have the opportunity. - Don\u2019t dismiss counselling as something for others, we all need it now.  </li> </ul>"},{"location":"key-takeaways/#moving-forward","title":"\ud83d\udcaa Moving Forward","text":"<p>Remember: - You belong here - Your unique perspective matters - Ask for help - It's a sign of wisdom, not weakness - Celebrate wins - Big and small achievements deserve recognition - Keep coding - Every line of code is progress</p>"},{"location":"key-takeaways/#continue-learning","title":"\ud83d\udcda Continue Learning","text":"<p>Explore resources and connect with others to keep growing.</p>"},{"location":"key-takeaways/#next-resources","title":"\u27a1\ufe0f Next: Resources","text":""},{"location":"resources/","title":"\ud83d\udcda Resources","text":""},{"location":"resources/#github-copilot","title":"\ud83c\udf10 GitHub Copilot","text":"<ul> <li>GitHub Copilot Fundamentals Part 1 - Explore the fundamentals of GitHub Copilot and its potential to enhance productivity and foster innovation for both individual developers and businesses. Discover how to implement it within your organization and unleash its power for your own projects.  </li> <li>GitHub Copilot Fundamentals Part 2 - Continue the path and learn advanced functionalities of GitHub Copilot and how to best use them</li> <li>Microsoft Applied Skills: Accelerate app development by using GitHub Copilot - To earn this Microsoft Applied Skills credential, learners demonstrate the ability to Accelerate app development by using GitHub Copilot. Candidates for this credential should have familiarity with Visual Studio Code and GitHub, and should have experience developing apps by using C# (boo)</li> <li>GitHub Copilot Certification - This exam is designed for individuals in the field of software development who are proficient in using GitHub, including software developers, administrators, and project managers. This certification is intended for individuals who have a foundational understanding of GitHub Copilot as a product and its available features, along with hands-on experience in optimizing software development workflows using GitHub Copilot. Once achieved, the certification will be valid for two years.  </li> <li>GitHub Copilot Docs </li> </ul>"},{"location":"resources/#imposter-syndrome-resources","title":"\ud83d\udcd6 Imposter Syndrome Resources","text":"<ul> <li>The Imposters Handbook - Code and resources for the book.</li> <li>Growth Mindset</li> </ul>"},{"location":"resources/#next-contact-page","title":"\u27a1\ufe0f Next: Contact Page","text":""},{"location":"the-expert/","title":"\ud83e\uddd1\u200d\ud83c\udfeb The Expert","text":"<p>The Expert feels they must know everything - Python, Devops, Infrastructure as Code, Testing, Security - and be able to answer every question on any topic. This mindset can lead to stress and burnout.</p>"},{"location":"the-expert/#why-it-happens","title":"\ud83e\udde0 Why It Happens","text":"<p>Experts often set high standards for themselves and fear being seen as less knowledgeable. They believe they need to know everything before they can contribute or teach others.</p> <p>\"The more I learn, the more I realize how much I don't know.\" - Albert Einstein</p> <p>With GitHub Copilot if you don't understand how something works, you can just ask it. Depending on which model you choose you will see a more verbose or a more succinct explanation. </p> <p>The words you choose in your prompt can also frame what the output will look like - so this explanation is quite verbose, but also there is some assumed level of education in there. I could reframe the question asking it to explain it to me like I'm 5 years old. Or to put it in a fun way. Or - to explain it as if I needed to justify this code block to a senior technical decision maker - so it would give me the right words to defend my code if I need to.</p> <p>You can ask your questions in the context of the file you have open, the lines you have highlighted, the whole repository, a specific folder.  </p> <p>I want all the images in this repository to be styled consistently, responsively and accessibly - so I might ask it to check my code and confirm the way I have written it meets those standards, and if it doesn't - explain to me how I can rewrite it so it does that.</p> <p></p> <p>If you are having doubts about your skills as a developer, I strongly recommend you use GitHub Copilot in Ask Mode. That allows you to use it like a coach, a teacher, a trainer - but one that will never get tired of your endless questions. One that is always patient, and can keep going until you feel really confident you understand. </p> <p>If you are a more senior dev, you will probably find Edit Mode to be a great enabler. It will help you write the code your were going to write anyway, but faster. It will quickly fill in the boilerplate code for you, acurately predicting what you want from your comments, or even from you starting to type something.  </p>"},{"location":"the-expert/#if-you-are-a-senior-architect-you-can-see-the-whole-project-in-your-mind-or-your-docs-and-you-can-acurately-describe-what-you-want-or-have-written-the-architecture-file-for-the-repo-and-know-how-to-guide-an-agent-back-to-the-main-track-when-it-goes-down-a-rabbit-hole-then-you-will-find-agent-mode-a-tremendous-tool-but-do-not-use-this-if-you-are-a-beginner-because-you-will-never-learn-to-code-properly-never-understand-the-fundamentals-never-have-the-skills-to-survive-in-this-field-if-you-skip-straight-to-agent-mode-and-let-it-code-for-you","title":"If you are a Senior Architect - you can see the whole project in your mind (or your docs) and you can acurately describe what you want - or have written the architecture file for the repo and know how to guide an Agent back to the main track when it goes down a rabbit hole, then you will find Agent Mode a tremendous tool... but DO NOT USE THIS if you are a beginner, because you will never learn to code properly, never understand the fundamentals, never have the skills to survive in this field, if you skip straight to Agent Mode and let it code for you.","text":""},{"location":"the-expert/#growth-mindset","title":"\ud83c\udf31 Growth Mindset","text":"<ul> <li>Embrace learning as a journey - There's always something new to discover</li> <li>Ask questions and seek help - It's a sign of strength, not weakness</li> <li>Share knowledge with others - Teaching reinforces your own learning</li> <li>It's okay to say \"I don't know\" - Then add \"but let's find out together\"</li> </ul>"},{"location":"the-expert/#mental-models","title":"Mental Models","text":"<ul> <li>Ask Mode = Conversation. Copilot is your \u201cpair programmer who explains and brainstorms.\u201d  </li> <li>Edit Mode = Controlled Rewrite. You hand Copilot a patch of code and say \u201ctransform this with constraint X.\u201d  </li> <li>Agent Mode = Delegated Workflow. You define a goal; Copilot plans steps, performs them iteratively, and summarizes progress.</li> </ul>"},{"location":"the-expert/#capabilities-constraints","title":"Capabilities &amp; Constraints","text":"<ul> <li>Ask Mode</li> <li>Pulls lightweight context: the current file, selection, maybe related symbols.  </li> <li>Does NOT alter files directly.  </li> <li>Great for: learning, quick utility snippets, performance/complexity questions, API lookups.  </li> <li>Safe sandbox for exploratory thinking.</li> <li>Edit Mode </li> <li>You highlight code (or invoke at file scope), give an imperative instruction: \u201cOptimize this loop,\u201d \u201cConvert to async,\u201d \u201cAdd docstrings.\u201d</li> <li>Generates a diff you can accept, partially apply, or reject.</li> <li>Promotes incremental, reviewable change.</li> <li>Encourages clarity: best prompts are specific about constraints (e.g., \u201cKeep public API the same; improve readability; no external deps\u201d).  </li> <li>Agent Mode</li> <li>Accepts a goal like: \u201cAdd JWT auth including middleware, tests, and docs.\u201d</li> <li>Can:<ul> <li>Inspect multiple files.</li> <li>Create new modules.  </li> </ul> </li> <li>Chain reasoning (\u201cNeed config loader \u2192 create file \u2192 update imports \u2192 add tests\u201d).  </li> <li>Sometimes prepare a PR-ready branch (depending on environment).</li> <li>Best when the task has multiple dependent steps or requires repository-wide awareness.</li> <li>Requires trust but verify: always review each step\u2014especially security-sensitive code.  </li> </ul>"},{"location":"the-expert/#example-scenario-python","title":"Example Scenario (Python)","text":"<p>Suppose you have this (deliberately naive) function:  </p> <pre><code>def compute_totals(items):\n    # items: list of dicts like {\"price\": 10.0, \"qty\": 2, \"category\": \"book\"}\n    subtotal = 0\n    cat_map = {}\n    for it in items:\n        if \"price\" not in it or \"qty\" not in it:\n            continue\n        subtotal += it[\"price\"] * it[\"qty\"]\n        c = it.get(\"category\", \"uncategorized\")\n        if c not in cat_map:\n            cat_map[c] = 0\n        cat_map[c] += it[\"price\"] * it[\"qty\"]\n    tax = subtotal * 0.0825\n    grand = subtotal + tax\n    return {\n        \"subtotal\": subtotal,\n        \"tax\": tax,\n        \"grand_total\": grand,\n        \"by_category\": cat_map\n    }\n</code></pre>"},{"location":"the-expert/#how-youd-use-each-mode","title":"How You\u2019d Use Each Mode","text":"<ol> <li> <p>Ask Mode Prompt: \u201cExplain time complexity of compute_totals and suggest micro-optimizations - don\u2019t change semantics.\u201d Output: Explanation + maybe suggestion to use defaultdict, avoid duplicated multiplication, consider Decimal for currency.</p> </li> <li> <p>Edit Mode Prompt (select the function): \u201cRefactor for readability, use type hints, minimize repeated multiplication, and use Decimal (assume 2-decimal currency).\u201d Possible Result (diff style):  </p> </li> </ol> <pre><code>from decimal import Decimal, ROUND_HALF_UP\nfrom collections import defaultdict\nfrom typing import List, Dict, Any\n\ndef compute_totals(items: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    subtotal = Decimal(\"0.00\")\n    by_category: Dict[str, Decimal] = defaultdict(lambda: Decimal(\"0.00\"))\n\n    for it in items:\n        try:\n            price = Decimal(str(it[\"price\"]))\n            qty = Decimal(str(it[\"qty\"]))\n        except KeyError:\n            continue\n        line_total = price * qty\n        subtotal += line_total\n        category = it.get(\"category\", \"uncategorized\")\n        by_category[category] += line_total\n\n    tax_rate = Decimal(\"0.0825\")\n    tax = (subtotal * tax_rate).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n    grand = (subtotal + tax).quantize(Decimal(\"0.01\"), rounding=ROUND_HALF_UP)\n\n    return {\n        \"subtotal\": str(subtotal),\n        \"tax\": str(tax),\n        \"grand_total\": str(grand),\n        \"by_category\": {k: str(v) for k, v in by_category.items()}\n    }\n</code></pre> <p>Commentary:</p> <ul> <li>Converted to Decimal for currency correctness (float can accumulate rounding error).</li> <li>defaultdict simplifies accumulation.</li> <li> <p>Single computation of line_total.  </p> </li> <li> <p>Agent Mode Prompt: \u201cIntroduce a pricing module:</p> </li> <li> <p>Split compute_totals into: parse_items(), aggregate_by_category(), compute_totals()</p> </li> <li>Add unit tests (pytest) covering edge cases: missing keys, zero qty, large price</li> <li>Add README snippet documenting currency handling</li> <li>Ensure no external dependencies besides stdlib + pytest.\u201d The Agent could:</li> <li>Create pricing/init.py</li> <li>Add pricing/aggregate.py</li> <li>Write tests in tests/test_pricing.py</li> <li>Update README.md with usage example.</li> </ul>"},{"location":"the-expert/#interesting-fact-multi-step-agents-often-internally-chain-multiple-edit-like-operations-conceptually-they-reuse-reasoning-loops-youd-manually-perform","title":"Interesting Fact: Multi-step Agents often internally chain multiple \u201cedit-like\u201d operations; conceptually they reuse reasoning loops you\u2019d manually perform.","text":""},{"location":"the-expert/#next-the-perfectionist","title":"\u27a1\ufe0f Next: The Perfectionist","text":""},{"location":"the-natural-genius/","title":"\ud83e\udde0 The Natural Genius","text":"<p>The Natural Genius expects to master new skills quickly. When learning takes time, they may feel discouraged. This type typically feels like a fraud because they don\u2019t believe that they are naturally intelligent or competent.</p>"},{"location":"the-natural-genius/#embrace-the-process","title":"\ud83c\udf1f Embrace the Process","text":"<ul> <li>Learning takes time and effort - Even \"naturals\" practice extensively</li> <li>Celebrate progress, not perfection - Small improvements compound over time</li> <li>Everyone learns at their own pace - Your journey is unique</li> <li>Struggle is part of growth - Challenges make you stronger</li> <li>Focus on the journey - Enjoy the process of discovery</li> </ul> <p>When I teach coding to women wanting to change careers, they often suffer from this kind of Imposter Syndrome. They look around and it seems like everyone else understands, everyone else picks it up right away and they listen to that voice in their heads that says \"women don't code\" or \"women don't like to code, they like to do more artistic or social things\". I always remind them that No-one ever walks out of the birth canal. It took nearly two years to learn how to walk, to learn how to feed yourself. If humans gave up on day 1 because they couldn't take care of themselves - we would all be long gone by now. Everything worth doing takes time to learn how to do it well. It takes practice. It takes patience. Do a little bit each day and you will get better and better.  </p> <p></p> <p>\"It's not that I'm so smart, it's just that I stay with problems longer.\" - Albert Einstein</p>"},{"location":"the-natural-genius/#next-the-soloist","title":"\u27a1\ufe0f Next: The Soloist","text":""},{"location":"the-perfectionist/","title":"\ud83c\udfaf The Perfectionist","text":"<p>The Perfectionist strives for flawless code and never feels satisfied. This can slow progress and increase frustration.</p>"},{"location":"the-perfectionist/#embracing-imperfection","title":"\ud83c\udfc6 Embracing Imperfection","text":"<ul> <li>Mistakes are part of learning - Each bug teaches you something new</li> <li>Progress over perfection - Done is better than perfect</li> <li>Review and refactor, but don't obsess - Set time limits for improvements</li> <li>Ship it! - Real-world feedback is more valuable than theoretical perfection</li> </ul> <p>\"Perfect is the enemy of good.\" - Voltaire</p>"},{"location":"the-perfectionist/#next-the-superperson","title":"\u27a1\ufe0f Next: The Superperson","text":""},{"location":"the-soloist/","title":"\ud83c\udfc3 The Soloist","text":"<p>The Soloist prefers to work alone and may hesitate to ask for help. Collaboration is key to growth!</p>"},{"location":"the-soloist/#collaborate-and-connect","title":"\ud83e\udd1d Collaborate and Connect","text":"<ul> <li>Ask for help when needed - It speeds up learning and builds relationships</li> <li>Join Python communities - PyCon Thailand, Discord, local meetups</li> <li>Share your journey with others - Your struggles help others feel less alone</li> <li>Pair programming - Two heads are better than one</li> <li>Contribute to open source - Learn from others and give back</li> </ul> <p>\"If you want to go fast, go alone. If you want to go far, go together.\" - African Proverb</p>"},{"location":"the-soloist/#next-key-takeaways","title":"\u27a1\ufe0f Next: Key Takeaways","text":""},{"location":"the-superperson/","title":"\ud83e\uddb8 The Superperson","text":"<p>The Superperson tries to do it all\u2014coding, teaching, leading, and more. This can lead to exhaustion and feeling overwhelmed.</p>"},{"location":"the-superperson/#finding-balance","title":"\ud83e\udde9 Finding Balance","text":"<ul> <li>Delegate tasks when possible - You don't have to do everything alone</li> <li>Set realistic goals - Focus on what truly matters</li> <li>Take breaks and recharge - Burnout helps no one</li> <li>Know your limits - It's okay to say no sometimes</li> <li>Prioritize self-care - Your wellbeing comes first</li> </ul> <p>\"You can do anything, but not everything.\" - David Allen</p>"},{"location":"the-superperson/#next-the-natural-genius","title":"\u27a1\ufe0f Next: The Natural Genius","text":""}]}